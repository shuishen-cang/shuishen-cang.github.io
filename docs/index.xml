<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>luocang-blog</title>
    <link>https://shuishen-cang.github.io/</link>
    <description>Recent content on luocang-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Feb 2021 16:06:09 +0800</lastBuildDate>
    
	<atom:link href="https://shuishen-cang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>shuixia01-liteos-makefile</title>
      <link>https://shuishen-cang.github.io/post/shuixia01-liteos-makefile/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia01-liteos-makefile/</guid>
      <description>Makefile修改使用说明-liteos [TOC]
一、概述 ​	Makefile是一种控制自动编译的工具，Makefile关系到整个工程的编译规则。它告诉系统哪些文件先编译，哪些文件后编译，哪些文件在什么时候清理掉等等。因为是用来告知系统如何进行操作的，所以Makefile的语言风格跟shell很像，Makefile中也可以执行操作系统的命令。
​	海思官方提供了liteos以及linux下面的makefile，用来编译程序，得到相应的库文件以及可执行文件，其中liteos部分提供了一个可用的makefile，顶层makefile通过调用底层makefile得到相应的编译结果，但是在sample中的makefile存在一些缺陷，其具体表现是只能编译单个文件，并不支持多文件的编译，但是在编写驱动以及应用程序的时候，往往需要多文件的编译以及多文件的支持，因此需要对makefile做一些修改，以下就makefile做一些讲解。
二、 参考文件 三、 驱动编译 ​
四、 API描述 ​
五、 应用示例 1.官方makefile LITEOSTOPDIR ?= ../.. SAMPLE_OUT = . include $(LITEOSTOPDIR)/config.mk RM = -rm -rf LITEOS_LIBDEPS := --start-group $(LITEOS_LIBDEP) --end-group SRCS = $(wildcard sample.c) OBJS = $(patsubst %.c,$(SAMPLE_OUT)/%.o,$(SRCS)) all: $(OBJS) clean: @$(RM) *.o sample *.bin *.map *.asm $(OBJS): $(SAMPLE_OUT)/%.o : %.c ifneq ($(LITEOS_CPU_TYPE), arm926) ifneq ($(OUT)/lib/libipcm.a, $(wildcard $(OUT)/lib/libipcm.a)) echo &amp;#34;$(OUT)&amp;#34; cp -rf $(LITEOS_CPU_TYPE)/*.a $(OUT)/lib endif endif $(CC) $(LITEOS_CFLAGS) $(LITEOS_CXXFLAGS) -c $&amp;lt; -o $@ $(LD) $(LITEOS_LDFLAGS) --gc-sections -Map=$(SAMPLE_OUT)/sample.</description>
    </item>
    
    <item>
      <title>shuixia02-liteos-can</title>
      <link>https://shuishen-cang.github.io/post/shuixia02-liteos-can/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia02-liteos-can/</guid>
      <description>CAN设备驱动测试使用说明-liteos [TOC]
一、概述 ​	控制器局域网络 CAN（Controller Area Network）最初是由德国 Bosch 公司设计并应用于汽车的监测和控制。由于其作为一种技术先进、可靠性高、功能完善、成本合理的远程网络通讯控制方式，因此 CAN 总线正逐步被广泛应用到各种控制领域,如中控车机等。 ​	芯片共支持 3 个 CAN 总线控制器，主 SOC 子系统有 2 个，Sensor Hub 子系统有 1个。
​	芯片的3个CAN总线控制器的地址在经过地址转换后均可以访问，即SOC系统可以访问Sensor Hub 的CAN总线控制器，但是SOC上的CAN总线控制器其中断连接到GIC中断控制器上，Sensor Hub 上的CAN总线控制器其中断连接在M7的中断控制器上，因此SOC使用Sensor Hub 的CAN总线控制器只能使用查询模式，而不能使用中断模式。
​	CAN总线控制器模块特性如下：
  CAN 总线控制器的工作时钟为 50 MHz。
  支持标准技术规范 CAN 2.0A 和 CAN 2.0B。
  支持多设备时的总线仲裁，优先级高的 ID 可继续被发送。
  支持传输速率可编程，最高可达 1Mbps。
  最大支持 32 个报文对象，每个报文对象均可编程。
  支持主动错误和被动错误的自我判定以及故障节点的隔离。
  支持错误的自我修复。
  支持自动重传模式。</description>
    </item>
    
    <item>
      <title>shuixia03-liteos-gpio</title>
      <link>https://shuishen-cang.github.io/post/shuixia03-liteos-gpio/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia03-liteos-gpio/</guid>
      <description>GPIO设备驱动测试使用说明-liteos [TOC]
一、概述 ​	HI3559A芯片的CPU子系统分为两部分，一个是以为A73+A53为主的SOC部分，另一个是为M7为主的Sensor Hub部分，其中SOC子系统与Sensor Hub子系统的外设均采用统一的外设接口，即寄存器组完全一样，并且可以通过地址转换实现跨子系统访问，但是SOC子系统与Sensor Hub子系统的中断系统完全肚子，并不能完全共享中断向量。
​	主 SOC 子系统支持 19 组 GPIO（General Purpose Input/Output），即 GPIO0～GPIO18。每组 GPIO 提供 8 个可编程的输入输出管脚（GPIO18 只有 4 个）。
​	Sensor Hub 子系统支持 5 组 GPIO，即 GPIO0~GPIO4。每组 GPIO 提供 8 个可编程的输入输出管脚（GPIO4 只有 2 个）。 ​	每个管脚可以配置为输入或者输出。这些管脚用于生成特定应用的输出信号或采集特定应用的输入信号。作为输入管脚时，GPIO 可作为中断源；作为输出管脚时，每个GPIO 都可以独立地清 0 或置 1。
​	该文档就GPIO的操作使用以及GPIO的复用功能做详细讲解。
二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.xlsx》
驱动操作使用指南《外围设备驱动 操作指南.pdf》
寄存器相关操作《Hi3559A╱C V100 ultra-HD Mobile Camera SoC 用户指南.pdf》
三、驱动编译 1. 官方GPIO驱动编译 ​	海思官方提供的程序兼容posix接口，实现了部分函数功能，gpio相关的驱动程序源码路径为 drivers/gpio，在编译脚本里指定源码路径与头文件路径，编译成功后，out目录下会生成名为 libgpio.a 的库文件，链接时通过-lgpio 指定对应库文件。</description>
    </item>
    
    <item>
      <title>shuixia04-liteos-pwm</title>
      <link>https://shuishen-cang.github.io/post/shuixia04-liteos-pwm/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia04-liteos-pwm/</guid>
      <description>PWM设备驱动测试使用说明-liteos [TOC]
一、概述 ​	脉冲宽度调制是一种模拟控制方式，根据相应载荷的变化来调制晶体管，来实现晶体管或MOS导通时间的改变，从而实现开关稳压电源输出的改变。这种方式能使电源的输出电压在工作条件变化时保持恒定，是利用微处理器的数字信号对模拟电路进行控制的一种非常有效的技术。PWM调制是利用数字输出来对模拟电路进行控制的一种非常有效的技术，广泛应用在从测量、通信到功率控制与变换的许多领域中。
​	HI3559A芯片的CPU子系统分为两部分，一个是以为A73+A53为主的SOC部分，另一个是为M7为主的Sensor Hub部分，其中SOC子系统与Sensor Hub子系统的外设均采用统一的外设接口，即寄存器组完全一样，并且可以通过地址转换实现跨子系统访问，但是SOC子系统与Sensor Hub子系统的中断系统完全肚子，并不能完全共享中断向量。
​	主 SOC 子系统提供 1 组 2 路独立的脉宽调制信号输出。 ​	Sensor Hub 子系统提供 1 组 8 路独立的脉宽调制信号输出
二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.xlsx》
驱动操作使用指南《外围设备驱动 操作指南.pdf》
寄存器相关操作《Hi3559A╱C V100 ultra-HD Mobile Camera SoC 用户指南.pdf》
三、 驱动编译 ​	海思官方没有提供PWM相关的驱动，因此需要自行操作寄存器进行PWM驱动编写，其编写流程如下：
graph TD A(使能PWM时钟)--B(配置GPIO复用功能)--C(配置周期占空比)--D(使能输出)  ​	具体操作如下：
​	在hal_gpioaf.h中添加如下代码：
...... #define AF_PWM_VAL 0x01 #define AF_PWM0_OUT IOREG(73) #define AF_PWM1_OUT IOREG(74) ...... #define AF_PWM0_Config(){ \ writeor(AF_PWM0_OUT, AF_PWM_VAL); \ }  #define AF_PWM1_Config(){ \ writeor(AF_PWM1_OUT, AF_PWM_VAL); \ } ​	新建hal_pwm.</description>
    </item>
    
    <item>
      <title>ubuntu01-setup</title>
      <link>https://shuishen-cang.github.io/post/ubuntu01_setup/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/ubuntu01_setup/</guid>
      <description>ubuntu开发环境搭建  [TOC]
一、换源 二、安装软件 sudo apt install vim sudo apt install gcc sudo apt install openocd sudo apt install libusb sudo apt install git sudo apt install minicom git config --global user.email &amp;#34;335403241@qq.com&amp;#34; git config --global user.name &amp;#34;cang&amp;#34; 三、NFS 搭建NFS服务器环境，供ARM板挂载
安装 &amp;amp; 配置 sudo apt install nfs-kernel-server sudo vim /etc/exports # 添加： /home/luocang/workspace *(rw,sync,no_subtree_check) #重启nfs服务 sudo service nfs-kernel-server restart 测试 sudo mount -t nfs -o nolock 127.0.0.1:/home/luocang/workspace /mnt 脚本 #!</description>
    </item>
    
    <item>
      <title>ubuntu04-hugo</title>
      <link>https://shuishen-cang.github.io/post/ubuntu04_hugo/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/ubuntu04_hugo/</guid>
      <description>hugo使用HTML以及mermaid  一、安装hugo 1. 安装hugo sudo apt install hugo hugo new site myblog cd myblog luocang@luocang-SC:~/workspace/03doc/myblog$ ls archetypes config.toml content data layouts static themes 使用hugo生成了一系列的文件以及文件夹，其中content为需要的markdown文件存放路径，themes为存放皮肤的文件夹，config.toml为hugo的对应配置文件，可以设置标签等。
2. 设置皮肤 皮肤可以在hugo的官网https://www.gohugo.org/theme/中获取，为了后期的兼容，在下载后需要去除.git文件夹。
cd themes git clone git@github.com:TiTi/hurock.git cd hurock/ rm -rf .git/ 3. 配置皮肤 选择使用皮肤需要在config.toml里面设置。
cd ../../ subl config.toml #修改为以下代码 baseURL = &amp;#34;https://shuishen-cang.github.io/&amp;#34; languageCode = &amp;#34;en-us&amp;#34; title = &amp;#34;洛沧-blog&amp;#34; theme = &amp;#34;hurock&amp;#34; 4. helloworld hugo new post/hello.md subl content/post/hello.md # 修改为以下代码 --- title: &amp;#34;Hello&amp;#34; date: 2021-02-01T20:06:38+08:00 draft: false --- helloworld 5.</description>
    </item>
    
    <item>
      <title>Lichee_04驱动分析</title>
      <link>https://shuishen-cang.github.io/post/lichee_04%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 06 Jan 2021 00:02:20 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/lichee_04%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90/</guid>
      <description>Lichee_04驱动分析  一、字符驱动 linux的驱动主要分为字符驱动、块驱动和网络驱动，字符驱动比较简单，容易上手。linux系统中一切皆是文件，驱动也不例外，用户程序在用户空间使用驱动主要是通过读写设备文件，并且对设备文件进行读写操作，因此实现驱动程序应该实现以下功能：
 在文件系统中创建一个可以访问的文件 建立起读写打开等函数的实现 将读写打开等函数与创建的文件联系起来  graph TD d4--d5(class_create) d5--d6(device_create) d5--d7(device_create) subgraph register_chrdev d1(alloc_chrdev)--d2(cdev_alloc)--d3(cdev_init)--d4(cdev_add) end  如上图所示：驱动程序的注册的流程如上图所示：由上述一系列函数组成，其中函数说明如下：
   函数 说明     alloc_chrdev 申请一组可用的主从设备号，当主设备号为零的时候表明是动态分配   cdev_alloc 申请一个可用的dev对象，用于存储操作函数相关的结构体   cdev_init 将操作函数结构体赋值   cdev_add 将cdev与主从设备号关联起来   class_create 在/sys/class/路径下面创建一个类用于存储驱动相关信息   device_create 在class_create创建的类下面创建一个device，分配唯一的主从设备号，并且uevent给udev在/dev下面创建软连接    tops.c
#include &amp;lt;linux/init.h&amp;gt;#include &amp;lt;linux/kernel.h&amp;gt;#include &amp;lt;linux/module.h&amp;gt;#include &amp;lt;linux/fs.h&amp;gt;#include &amp;lt;linux/cdev.h&amp;gt;#include &amp;lt;linux/slab.h&amp;gt;#include &amp;lt;linux/uaccess.h&amp;gt;#include &amp;lt;linux/semaphore.h&amp;gt;#include &amp;lt;linux/miscdevice.h&amp;gt;#include &amp;lt;linux/vmalloc.h&amp;gt;#include &amp;lt;linux/wait.h&amp;gt;#include &amp;lt;linux/poll.h&amp;gt;#include &amp;lt;linux/sched.h&amp;gt;#include &amp;lt;linux/proc_fs.h&amp;gt;#include &amp;lt;linux/seq_file.</description>
    </item>
    
    <item>
      <title>Lichee_03GPIO摸索</title>
      <link>https://shuishen-cang.github.io/post/lichee_03gpio%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 06 Jan 2021 00:02:08 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/lichee_03gpio%E5%88%86%E6%9E%90/</guid>
      <description>Lichee_03GPIO分析  一、设备树 linux使用设备树来管理device，我们之前使用的设备树是sun8i-v3s-licheepi-zero-dock.dts，根据设备树在板卡的/sys/firmware/devicetree/base会生成相对应的属性文件，板卡上存在一个三色的led，我们可以用它来测试驱动，但是该部分led在系统启动后便已经正常点亮，因此需要查看该部分原因。
经过分析，其中RGBled的引脚与MMC1的引脚发生了冲突，因此导致了LED上电之后会正常启动，那么应该禁止其在设备树中的使能。修改sun8i-v3s-licheepi-zero-dock.dts，删除其MMC1中的status = &amp;ldquo;okay&amp;rdquo;;代码如下：
&amp;amp;mmc1 { pinctrl-0 = &amp;lt;&amp;amp;mmc1_pins&amp;gt;; pinctrl-names = &amp;#34;default&amp;#34;; broken-cd; bus-width = &amp;lt;4&amp;gt;; vmmc-supply = &amp;lt;&amp;amp;reg_vcc3v3&amp;gt;; }; 修改后对设备树进行编译。 在linux根目录下：
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- dtbs 将编译后的arch/arm/boot/dts/sun8i-v3s-licheepi-zero-dock.dtb覆盖掉之前的dtb，然后重启板卡，发现led已经没有启动了，然后查看mmc1的状态。
cat /sys/firmware/devicetree/base/soc/mmc@01c10000/status disabled 表明mmc1已经关闭了。
二、操作GPIO 如图所示，PG0的编号为192，因此采用linux的标准操作尝试操作一下GPIO。
echo 192 &amp;gt; /sys/class/gpio/ ls /sys/class/gpio/ cd /sys/class/gpio/gpio192/ echo &amp;#34;out&amp;#34; &amp;gt; /sys/class/gpio/gpio192/direction echo 1 &amp;gt; /sys/class/gpio/gpio192/value echo 0 &amp;gt; /sys/class/gpio/gpio192/value 当给value赋值为0的时候发现灯能够点亮，赋值为1的时候灯熄灭，说明GPIO操作成功，依次尝试操作PG0，PG1，PG2都能成功，说明操作该部分GPIO成功。
三、编写用户程序测试GPIO 上面代码在shell实现了gpio的操作，但是大部分时候程序是在c语言中实现的，c语言中其gpio的翻转速度更快一些。
其实现步骤如下：
 往/sys/class/gpio/export写入引脚编号 设置引脚方向 写入引脚的值  代码如下：
hal_gpio.c
#include &amp;#34;hal_gpio.h&amp;#34; struct gpio_ctl pg_port[] = { { .</description>
    </item>
    
    <item>
      <title>Lichee_01开发环境</title>
      <link>https://shuishen-cang.github.io/post/lichee_01%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 27 Dec 2020 21:31:22 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/lichee_01%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>Lichee_01开发环境  [toc]
一、开发环境搭建 1. 建立docker容器 手上有一块lichee板子很久了，lichee的资料相对较全，最近又在学习linux，因此拿这个平台验证一下也不错，要开发芯片，必须先搭建交叉编译环境，考虑到电脑上已经安装了一个树莓派的交叉编译环境了，那么就在docker里面安装交叉编译器吧。
先搭建一个最基本的docker开发环境吧，采用ubuntu18为基础
docker pull ubuntu:18.04 docker images 可以看到已经存在ubuntu镜像了，然后在workspace下面建立一个目录用来作为lichee的开发目录，其目录为~/workspace/02prj/01lichee_zero下面，因此采用以下命令创建一个容器。
docker run -it --name=lichee -v ~/workspace/02prj/01lichee_zero:/workspace ubuntu:18.04 /bin/bash # 进入docker容器后 apt update apt install nano nano /etc/apt/sources.list # 修改为 deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.</description>
    </item>
    
    <item>
      <title>Lichee_02系统编译</title>
      <link>https://shuishen-cang.github.io/post/lichee_02%E7%B3%BB%E7%BB%9F%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 27 Dec 2020 21:31:22 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/lichee_02%E7%B3%BB%E7%BB%9F%E7%BC%96%E8%AF%91/</guid>
      <description>Lichee_02系统编译  一、编译uboot 1. 下载uboot 主机和容器之间存在共享文件夹，在主机里下载最新的uboot。
cd ~/workspace/02prj/01lichee_zero/01system/ git clone https://github.com/Lichee-Pi/u-boot.git -b v3s-current 等待下载完毕后，进入u-boot路径，由于买的板子没有spiflash，因此需要编译支持SD卡启动，修改uboot，
# 修改 include/configs/sun8i.h, 使u-boot可以直接从tf卡启动： vim include/configs/sun8i.h # 添加 #define CONFIG_BOOTCOMMAND &amp;#34;setenv bootm_boot_mode sec; load mmc 0:1 0x41000000 zImage; load mmc 0:1 0x41800000 sun8i-v3s-licheepi-zero-dock.dtb; bootz 0x41000000 - 0x41800000;&amp;#34; #define CONFIG_BOOTARGS &amp;#34;console=ttyS0,115200 panic=5 mtdparts=tf:1M(uboot),64k(dtb),4M(kernel),-(rootfs) rootwait root=/dev/mmcblk0p2 earlyprintk rw vt.global_cursor_default=0&amp;#34; 2. 编译 先安装必须的依赖库。
apt-get install libncurses5-dev apt-get install device-tree-compiler apt-get install python apt-get install bc docker start lichee docker attach lichee cd /workspace/01system/u-boot/ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- LicheePi_Zero_800x480LCD_defconfig make ARCH=arm menuconfig time make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- 2&amp;gt;&amp;amp;1 | tee build.</description>
    </item>
    
    <item>
      <title>ubuntu02-qt开发环境搭建</title>
      <link>https://shuishen-cang.github.io/post/ubuntu02_qt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Tue, 15 Dec 2020 22:21:25 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/ubuntu02_qt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>ubuntu开发环境搭建  一、安装qt ​	考虑到后期在docker中安装交叉编译器，并且在docker镜像中编译qt，docker镜像暂不考虑带图形界面，因此需要在主机安装qtcreator，但是qtcreator必须支持命令编译，这样便可以在主机中设置编译docker镜像上的程序。
安装QT 下载一个稳定版本的qt软件，其格式为.run，直接运行该程序即可。安装的时候带源码安装，以便后期的交叉编译。
二、新建项目 ​	新建一个qt控制台项目，一切采用默认配置，其项目名称为qtest。修改其main.cpp。
#include &amp;lt;QCoreApplication&amp;gt;#include &amp;lt;QDebug&amp;gt; int main(int argc, char *argv[]) { QCoreApplication a(argc, argv); qDebug() &amp;lt;&amp;lt; &amp;#34;hello!&amp;#34;; return a.exec(); } 编译，运行，在控制台上打印了hello。
三、命令编译 ​	先clean工程，查看qmake的目录，我的qmake路径为：/home/installed/Qt5.9.9/5.9.9/gcc_64/bin/qmake
​	控制台进入qtest工程下面。
cd ~/Desktop/qtest/ /home/installed/Qt5.9.9/5.9.9/gcc_64/bin/qmake &amp;#34;OBJECTS_DIR=build&amp;#34; qtest.pro make ls ./qtest ​	程序已经能够正常运行，说明具备基本的docker镜像下开发条件。</description>
    </item>
    
    <item>
      <title>ubuntu03-交叉编译器</title>
      <link>https://shuishen-cang.github.io/post/ubuntu03_%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Tue, 15 Dec 2020 22:21:25 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/ubuntu03_%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description>ubuntu-交叉编译器  一、安装交叉编译器 1. 安装 在linux下面安装交叉编译器用来编译ARM的程序，其中M系统采用arm-none-eabi-gcc，其中linux程序采用arm-linux-gnueabihf-gcc，可以采用apt的方式安装。
sudo apt install gcc-arm-none-eabi sudo apt install gcc-arm-linux-gnueabi arm-linux-gnueabihf-gcc -v arm-none-eabi-gcc -v 2. 配置 其中安装的交叉编译器并不能用来编译所有的芯片程序，大部分时候会受到库的影响和配置的影响。因此需要做出一定的修改，其关键参数如下：
--with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-mode=thumb --disable-sjlj-exceptions --disable-werror --enable-multilib --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=arm-linux-gnueabihf --disable-werror : 设置警告不报错 --enable-multilib : 可以支持多芯片 这些都是默认的配置，可以做一些芯片来适应不同的芯片，如下：
arm-linux-gnueabihf-gcc -v -mfpu=vfpv4 -mfloat-abi=soft -march=armv7 -mtune=cortex-a7 -mcpu=cortex-a7 二、测试代码 ​</description>
    </item>
    
  </channel>
</rss>