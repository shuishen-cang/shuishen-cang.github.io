<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shuixia on luocang-blog</title>
    <link>https://shuishen-cang.github.io/tags/shuixia/</link>
    <description>Recent content in shuixia on luocang-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Feb 2021 16:06:09 +0800</lastBuildDate>
    
	<atom:link href="https://shuishen-cang.github.io/tags/shuixia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>shuixia01-liteos-makefile</title>
      <link>https://shuishen-cang.github.io/post/shuixia01-liteos-makefile/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia01-liteos-makefile/</guid>
      <description>Makefile修改使用说明-liteos [TOC]
一、概述 ​	Makefile是一种控制自动编译的工具，Makefile关系到整个工程的编译规则。它告诉系统哪些文件先编译，哪些文件后编译，哪些文件在什么时候清理掉等等。因为是用来告知系统如何进行操作的，所以Makefile的语言风格跟shell很像，Makefile中也可以执行操作系统的命令。
​	海思官方提供了liteos以及linux下面的makefile，用来编译程序，得到相应的库文件以及可执行文件，其中liteos部分提供了一个可用的makefile，顶层makefile通过调用底层makefile得到相应的编译结果，但是在sample中的makefile存在一些缺陷，其具体表现是只能编译单个文件，并不支持多文件的编译，但是在编写驱动以及应用程序的时候，往往需要多文件的编译以及多文件的支持，因此需要对makefile做一些修改，以下就makefile做一些讲解。
二、 参考文件 三、 驱动编译 ​
四、 API描述 ​
五、 应用示例 1.官方makefile LITEOSTOPDIR ?= ../.. SAMPLE_OUT = . include $(LITEOSTOPDIR)/config.mk RM = -rm -rf LITEOS_LIBDEPS := --start-group $(LITEOS_LIBDEP) --end-group SRCS = $(wildcard sample.c) OBJS = $(patsubst %.c,$(SAMPLE_OUT)/%.o,$(SRCS)) all: $(OBJS) clean: @$(RM) *.o sample *.bin *.map *.asm $(OBJS): $(SAMPLE_OUT)/%.o : %.c ifneq ($(LITEOS_CPU_TYPE), arm926) ifneq ($(OUT)/lib/libipcm.a, $(wildcard $(OUT)/lib/libipcm.a)) echo &amp;#34;$(OUT)&amp;#34; cp -rf $(LITEOS_CPU_TYPE)/*.a $(OUT)/lib endif endif $(CC) $(LITEOS_CFLAGS) $(LITEOS_CXXFLAGS) -c $&amp;lt; -o $@ $(LD) $(LITEOS_LDFLAGS) --gc-sections -Map=$(SAMPLE_OUT)/sample.</description>
    </item>
    
    <item>
      <title>shuixia02-liteos-can</title>
      <link>https://shuishen-cang.github.io/post/shuixia02-liteos-can/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia02-liteos-can/</guid>
      <description>CAN设备驱动测试使用说明-liteos [TOC]
一、概述 ​	控制器局域网络 CAN（Controller Area Network）最初是由德国 Bosch 公司设计并应用于汽车的监测和控制。由于其作为一种技术先进、可靠性高、功能完善、成本合理的远程网络通讯控制方式，因此 CAN 总线正逐步被广泛应用到各种控制领域,如中控车机等。 ​	芯片共支持 3 个 CAN 总线控制器，主 SOC 子系统有 2 个，Sensor Hub 子系统有 1个。
​	芯片的3个CAN总线控制器的地址在经过地址转换后均可以访问，即SOC系统可以访问Sensor Hub 的CAN总线控制器，但是SOC上的CAN总线控制器其中断连接到GIC中断控制器上，Sensor Hub 上的CAN总线控制器其中断连接在M7的中断控制器上，因此SOC使用Sensor Hub 的CAN总线控制器只能使用查询模式，而不能使用中断模式。
​	CAN总线控制器模块特性如下：
  CAN 总线控制器的工作时钟为 50 MHz。
  支持标准技术规范 CAN 2.0A 和 CAN 2.0B。
  支持多设备时的总线仲裁，优先级高的 ID 可继续被发送。
  支持传输速率可编程，最高可达 1Mbps。
  最大支持 32 个报文对象，每个报文对象均可编程。
  支持主动错误和被动错误的自我判定以及故障节点的隔离。
  支持错误的自我修复。
  支持自动重传模式。</description>
    </item>
    
    <item>
      <title>shuixia03-liteos-gpio</title>
      <link>https://shuishen-cang.github.io/post/shuixia03-liteos-gpio/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia03-liteos-gpio/</guid>
      <description>GPIO设备驱动测试使用说明-liteos [TOC]
一、概述 ​	HI3559A芯片的CPU子系统分为两部分，一个是以为A73+A53为主的SOC部分，另一个是为M7为主的Sensor Hub部分，其中SOC子系统与Sensor Hub子系统的外设均采用统一的外设接口，即寄存器组完全一样，并且可以通过地址转换实现跨子系统访问，但是SOC子系统与Sensor Hub子系统的中断系统完全肚子，并不能完全共享中断向量。
​	主 SOC 子系统支持 19 组 GPIO（General Purpose Input/Output），即 GPIO0～GPIO18。每组 GPIO 提供 8 个可编程的输入输出管脚（GPIO18 只有 4 个）。
​	Sensor Hub 子系统支持 5 组 GPIO，即 GPIO0~GPIO4。每组 GPIO 提供 8 个可编程的输入输出管脚（GPIO4 只有 2 个）。 ​	每个管脚可以配置为输入或者输出。这些管脚用于生成特定应用的输出信号或采集特定应用的输入信号。作为输入管脚时，GPIO 可作为中断源；作为输出管脚时，每个GPIO 都可以独立地清 0 或置 1。
​	该文档就GPIO的操作使用以及GPIO的复用功能做详细讲解。
二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.xlsx》
驱动操作使用指南《外围设备驱动 操作指南.pdf》
寄存器相关操作《Hi3559A╱C V100 ultra-HD Mobile Camera SoC 用户指南.pdf》
三、驱动编译 1. 官方GPIO驱动编译 ​	海思官方提供的程序兼容posix接口，实现了部分函数功能，gpio相关的驱动程序源码路径为 drivers/gpio，在编译脚本里指定源码路径与头文件路径，编译成功后，out目录下会生成名为 libgpio.a 的库文件，链接时通过-lgpio 指定对应库文件。</description>
    </item>
    
    <item>
      <title>shuixia04-liteos-pwm</title>
      <link>https://shuishen-cang.github.io/post/shuixia04-liteos-pwm/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia04-liteos-pwm/</guid>
      <description>PWM设备驱动测试使用说明-liteos [TOC]
一、概述 ​	脉冲宽度调制是一种模拟控制方式，根据相应载荷的变化来调制晶体管，来实现晶体管或MOS导通时间的改变，从而实现开关稳压电源输出的改变。这种方式能使电源的输出电压在工作条件变化时保持恒定，是利用微处理器的数字信号对模拟电路进行控制的一种非常有效的技术。PWM调制是利用数字输出来对模拟电路进行控制的一种非常有效的技术，广泛应用在从测量、通信到功率控制与变换的许多领域中。
​	HI3559A芯片的CPU子系统分为两部分，一个是以为A73+A53为主的SOC部分，另一个是为M7为主的Sensor Hub部分，其中SOC子系统与Sensor Hub子系统的外设均采用统一的外设接口，即寄存器组完全一样，并且可以通过地址转换实现跨子系统访问，但是SOC子系统与Sensor Hub子系统的中断系统完全肚子，并不能完全共享中断向量。
​	主 SOC 子系统提供 1 组 2 路独立的脉宽调制信号输出。 ​	Sensor Hub 子系统提供 1 组 8 路独立的脉宽调制信号输出
二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.xlsx》
驱动操作使用指南《外围设备驱动 操作指南.pdf》
寄存器相关操作《Hi3559A╱C V100 ultra-HD Mobile Camera SoC 用户指南.pdf》
三、 驱动编译 ​	海思官方没有提供PWM相关的驱动，因此需要自行操作寄存器进行PWM驱动编写，其编写流程如下：
graph TD A(使能PWM时钟)--B(配置GPIO复用功能)--C(配置周期占空比)--D(使能输出)  ​	具体操作如下：
​	在hal_gpioaf.h中添加如下代码：
...... #define AF_PWM_VAL 0x01 #define AF_PWM0_OUT IOREG(73) #define AF_PWM1_OUT IOREG(74) ...... #define AF_PWM0_Config(){ \ writeor(AF_PWM0_OUT, AF_PWM_VAL); \ }  #define AF_PWM1_Config(){ \ writeor(AF_PWM1_OUT, AF_PWM_VAL); \ } ​	新建hal_pwm.</description>
    </item>
    
    <item>
      <title>shuixia05-liteos-can_user</title>
      <link>https://shuishen-cang.github.io/post/shuixia05-liteos-can_user/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia05-liteos-can_user/</guid>
      <description>CAN设备用户操作使用说明-liteos [TOC]
一、概述 ​	之前在《CAN设备驱动测试使用说明-liteos》文档中初步说明了can驱动的编写，并且提供了一个demo实例，该实例初步实现了CAN口的收发，但是在大部分应用中，不能实现简单的收发，在发送的过程中，驱动实现了一个长度为16x8的数据fifo，能够满足大部分的应用，但是在接收中没有做任何处理，因此该部分不能直接在应用层中使用，本文件就can设备的进一步使用做一些说明。
二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.xlsx》
驱动操作使用指南《外围设备驱动 操作指南.pdf》
寄存器相关操作《Hi3559A╱C V100 ultra-HD Mobile Camera SoC 用户指南.pdf》
can驱动使用说明《CAN设备驱动测试使用说明-liteos》
三、驱动编译 1.hal_can.c/hal_can.h ​	参考《CAN设备驱动测试使用说明-liteos》
2.user_can.c/user_can.h ​	在hal_can.c/hal_can.h的基础上新建立一个线程，在CAN接口的接收中断中唤醒该线程，线程读取数据，并且在线程中对接收的CAN数据进行解析，解析之后做出处理。
graph TD A(创建线程)--B(创建事件)--C(等待事件)--D(处理事件)--C  ​	在hal_can.h中添加如下代码：
extern EVENT_CB_S can_wait_event; #define can_event_signal(event, bit) LOS_EventWrite(event, bit) #define can_event_wait(event, bit, timeout) LOS_EventRead(event, bit,\ LOS_WAITMODE_AND + LOS_WAITMODE_CLR, timeout) ​	在hal_can.c中添加如下代码：
irqreturn_t can_isr(int a, void *arg){ ... if(reg &amp;amp; 0x10){ ... can_event_signal(&amp;amp;can_wait_event,canid == 0 ? 0x01 : 0x10); } else if(reg &amp;amp; 0x08){ //txok  .</description>
    </item>
    
    <item>
      <title>shuixia06-liteos-uart_user</title>
      <link>https://shuishen-cang.github.io/post/shuixia06-liteos-uart_user/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia06-liteos-uart_user/</guid>
      <description>UART设备用户操作使用说明-liteos [TOC]
一、概述 ​	通用异步收发器 UART（Universal Asynchronous Receiver Transmitter）是一个异步串行的通信接口，主要功能是将来自外围设备的数据进行串并转换之后传入内部总线，以及将数据进行并串转换之后输出到外部设备。UART 的主要功能是和外部芯片的UART 进行对接，从而实现两芯片间的通信。 ​	主 SOC 子系统提供 5 个 UART 单元：
  UART0：2 线 UART，主要用于调试。
  UART1/3：4 线 UART。
  UART2/4：2 线 UART。
  Sensor Hub 子系统提供了 7 个 UART。
  UART0/1/2：4 线 UART。
  UART3/4/5/6：2 线 UART
UART 模块有以下特点：
  支持 64 x 8bit 的发送 FIFO 和 64 x 12bit 的接收 FIFO。
  支持数据位和停止位的位宽可编程。数据位可通过编程设定为 5/6/7/8 比特；停止位可通过编程设定为 1bit 或 2bit。</description>
    </item>
    
    <item>
      <title>shuixia07-liteos-spi_user</title>
      <link>https://shuishen-cang.github.io/post/shuixia07-liteos-spi_user/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia07-liteos-spi_user/</guid>
      <description>CAN设备用户操作使用说明-liteos [TOC]
一、概述 ​	SPI 控制器实现数据的串并、并串转换，可以作为 Master 与外部设备进行同步串行通信。支持 MOTOROLA 的 SPI、TI 串行同步、MicroWire 三种外设接口协议。
​	芯片总共有 12 组 SPI 接口，其中主 SOC 侧有 7 组 SPI0~6，Sensor Hub 子系统有 5组，Sensor Hub SPI0~4。
  其中 SOC 侧的 SPI0~3 支持 2 片选，SPI4 支持 4 片选，SPI5（master）/SPI6（slave）为 SOC 与 SensorHub 内部通讯专用。
  Sensor Hub SPI0/1 支持 3 片选，Sensor Hub SPI2 支持单片选，Sensor Hub SPI3（master）/ Sensor Hub SPI4（slave）为 SOC 与 Sensor Hub 内部通讯专用。
  SOC 侧的 SPI0~4 只支持 Master 接口，工作参考时钟为 APB 总线时钟，SPI 输出的SPI_CLK 最大支持 24.</description>
    </item>
    
    <item>
      <title>shuixia08-liteos-i2c_user</title>
      <link>https://shuishen-cang.github.io/post/shuixia08-liteos-i2c_user/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia08-liteos-i2c_user/</guid>
      <description>I2C设备用户操作使用说明-liteos [TOC]
一、概述 ​	I2C 模块的作用是完成 CPU 对 I2C 总线上连接的从设备的读写。
​	I2C 控制器为 Master 接口，完成 CPU 对 I2C 总线上连接的从设备的读写访问。芯片共有 20 个 I2C 控制器，主 SOC 子系统有 12 个，Sensor Hub 子系统有 8 个。
​	I2C 控制器具有以下功能特点：
 芯片的 I2C 是 Master 接口，支持标准时序和非标准时序。 支持多主设备时的总线仲裁。 支持 Clock synchronization 和 Bit and Byte waiting。 支持标准地址（7bit）和扩展地址（10bit）。 传输速率支持标准模式（100kbit/s）和快速模式（400kbit/s）。 支持 General Call 和 Start Byte 功能。 不支持 CBUS 器件。 支持 DMA 操作。 支持 64 x 8bit 的 TX FIFO 和 64 x 8bit 的 RX FIFO  二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.</description>
    </item>
    
    <item>
      <title>shuixia09-linux-makefile</title>
      <link>https://shuishen-cang.github.io/post/shuixia09-linux-makefile/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia09-linux-makefile/</guid>
      <description>Makefile修改使用说明-linux [TOC]
一、概述 ​	Makefile是一种控制自动编译的工具，Makefile关系到整个工程的编译规则。它告诉系统哪些文件先编译，哪些文件后编译，哪些文件在什么时候清理掉等等。因为是用来告知系统如何进行操作的，所以Makefile的语言风格跟shell很像，Makefile中也可以执行操作系统的命令。
​	海思官方提供了liteos以及linux下面的makefile，用来编译程序，得到相应的库文件以及可执行文件，其中liteos部分提供了一个可用的makefile，顶层makefile通过调用底层makefile得到相应的编译结果，但是在sample中的makefile存在一些缺陷，其具体表现是只能编译单个文件，并不支持多文件的编译，但是在编写驱动以及应用程序的时候，往往需要多文件的编译以及多文件的支持，因此需要对makefile做一些修改，以下就makefile做一些讲解。
二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.xlsx》
驱动操作使用指南《外围设备驱动 操作指南.pdf》
寄存器相关操作《Hi3559A╱C V100 ultra-HD Mobile Camera SoC 用户指南.pdf》
三、驱动编译 ​	linux的驱动分为内核驱动和模块驱动，内核驱动编译到内核里面，不方便后期的更改，一般后期添加的驱动都是以模块驱动的方式加载，驱动编译成.ko文件的模块，在用户程序空间以insmod的方式插入到内核。
​	linux的驱动根据类型分为字符驱动、块驱动和网络驱动，一般的外设都是以字符驱动的形式加载到内核空间，块驱动和网络驱动更多是作为字符驱动的上层驱动提供，因此本文只考虑字符驱动。
​	字符驱动的makefile如下：
Makefile
obj-m+=hello.o # KERNEL_PATH = /lib/modules/$(shell uname -r)/build/ CROSS_COMPILE := aarch64-himix100-linux- ARCH_TYPE = arm64 KERNEL_PATH = /workspace/02sdk/Hi3559AV100R001C02SPC020/01.software/board/Hi3559AV100_SDK_V2.0.2.0/osdrv/opensource/kernel/linux-4.9.y_multi-core/ all: make -C ${KERNEL_PATH} M=${PWD} ARCH=${ARCH_TYPE} CROSS_COMPILE=${CROSS_COMPILE} modules clean: make -C $(KERNEL_PATH) M=$(PWD) clean .PHONE:install remove install:all sudo insmod hello.ko sudo dmesg -c | grep hello remove: sudo rmmod hello hello.</description>
    </item>
    
    <item>
      <title>shuixia10-linux-gpioaf</title>
      <link>https://shuishen-cang.github.io/post/shuixia10-linux-gpioaf/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia10-linux-gpioaf/</guid>
      <description>GPIO复用驱动测试使用说明-linux [TOC]
一、概述 ​	HI3559A每个管脚可以配置为输入或者输出。这些管脚用于生成特定应用的输出信号或采集特定应用的输入信号。作为输入管脚时，GPIO 可作为中断源；作为输出管脚时，每个GPIO 都可以独立地清 0 或置 1。
​	该文档就GPIO的复用功能驱动部分做详细讲解。
二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.xlsx》
驱动操作使用指南《外围设备驱动 操作指南.pdf》
寄存器相关操作《Hi3559A╱C V100 ultra-HD Mobile Camera SoC 用户指南.pdf》
三、驱动编译 ​	linux的的字符串驱动一般作为platform驱动编译，platform驱动具有良好的移植性，但是设计起来较为复杂，本文就单文件驱动进行设计，linux驱动的设计步骤如下：
 实现基本的驱动功能函数 申请主次设备号 申请cdev设备，初始化cdev并且设置相关函数 创建一个class设备，并且在class下创建device  graph TD d4--d5(class_create) d5--d6(device_create) d5--d7(device_create) subgraph register_chrdev d1(alloc_chrdev)--d2(cdev_alloc)--d3(cdev_init)--d4(cdev_add) end  ​	系统提供的驱动部分的函数如下:
   函数 说明     alloc_chrdev 申请一组可用的主从设备号，当主设备号为零的时候表明是动态分配   cdev_alloc 申请一个可用的dev对象，用于存储操作函数相关的结构体   cdev_init 将操作函数结构体赋值   cdev_add 将cdev与主从设备号关联起来   class_create 在/sys/class/路径下面创建一个类用于存储驱动相关信息   device_create 在class_create创建的类下面创建一个device，分配唯一的主从设备号，并且uevent给udev在/dev下面创建软连接    ​	字符驱动的文件如下：</description>
    </item>
    
    <item>
      <title>shuixia11-linux-pwm</title>
      <link>https://shuishen-cang.github.io/post/shuixia11-linux-pwm/</link>
      <pubDate>Mon, 01 Feb 2021 16:06:09 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/shuixia11-linux-pwm/</guid>
      <description>PWM复用驱动测试使用说明-linux [TOC]
一、概述 ​	脉冲宽度调制是一种模拟控制方式，根据相应载荷的变化来调制晶体管，来实现晶体管或MOS导通时间的改变，从而实现开关稳压电源输出的改变。这种方式能使电源的输出电压在工作条件变化时保持恒定，是利用微处理器的数字信号对模拟电路进行控制的一种非常有效的技术。PWM调制是利用数字输出来对模拟电路进行控制的一种非常有效的技术，广泛应用在从测量、通信到功率控制与变换的许多领域中。
​	HI3559A芯片的CPU子系统分为两部分，一个是以为A73+A53为主的SOC部分，另一个是为M7为主的Sensor Hub部分，其中SOC子系统与Sensor Hub子系统的外设均采用统一的外设接口，即寄存器组完全一样，并且可以通过地址转换实现跨子系统访问，但是SOC子系统与Sensor Hub子系统的中断系统完全肚子，并不能完全共享中断向量。
​	主 SOC 子系统提供 1 组 2 路独立的脉宽调制信号输出。 ​	Sensor Hub 子系统提供 1 组 8 路独立的脉宽调制信号输出
二、 参考文件 GPIO复用功能描述文件《Hi3559A V100_PINOUT_EN.xlsx》
驱动操作使用指南《外围设备驱动 操作指南.pdf》
寄存器相关操作《Hi3559A╱C V100 ultra-HD Mobile Camera SoC 用户指南.pdf》
三、驱动编译 ​	linux的的字符串驱动一般作为platform驱动编译，platform驱动具有良好的移植性，但是设计起来较为复杂，本文就单文件驱动进行设计，linux驱动的设计步骤如下：
 实现基本的驱动功能函数 申请主次设备号 申请cdev设备，初始化cdev并且设置相关函数 创建一个class设备，并且在class下创建device  graph TD d4--d5(class_create) d5--d6(device_create) d5--d7(device_create) subgraph register_chrdev d1(alloc_chrdev)--d2(cdev_alloc)--d3(cdev_init)--d4(cdev_add) end  ​	系统提供的驱动部分的函数如下:
   函数 说明     alloc_chrdev 申请一组可用的主从设备号，当主设备号为零的时候表明是动态分配   cdev_alloc 申请一个可用的dev对象，用于存储操作函数相关的结构体   cdev_init 将操作函数结构体赋值   cdev_add 将cdev与主从设备号关联起来   class_create 在/sys/class/路径下面创建一个类用于存储驱动相关信息   device_create 在class_create创建的类下面创建一个device，分配唯一的主从设备号，并且uevent给udev在/dev下面创建软连接    ​	字符驱动的文件如下：</description>
    </item>
    
  </channel>
</rss>