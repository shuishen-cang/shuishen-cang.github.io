<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lichee on luocang-blog</title>
    <link>https://shuishen-cang.github.io/tags/lichee/</link>
    <description>Recent content in lichee on luocang-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 06 Jan 2021 00:02:20 +0800</lastBuildDate>
    
	<atom:link href="https://shuishen-cang.github.io/tags/lichee/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lichee_04驱动分析</title>
      <link>https://shuishen-cang.github.io/post/lichee_04%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 06 Jan 2021 00:02:20 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/lichee_04%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90/</guid>
      <description>Lichee_04驱动分析  一、字符驱动 linux的驱动主要分为字符驱动、块驱动和网络驱动，字符驱动比较简单，容易上手。linux系统中一切皆是文件，驱动也不例外，用户程序在用户空间使用驱动主要是通过读写设备文件，并且对设备文件进行读写操作，因此实现驱动程序应该实现以下功能：
 在文件系统中创建一个可以访问的文件 建立起读写打开等函数的实现 将读写打开等函数与创建的文件联系起来  graph TD d4--d5(class_create) d5--d6(device_create) d5--d7(device_create) subgraph register_chrdev d1(alloc_chrdev)--d2(cdev_alloc)--d3(cdev_init)--d4(cdev_add) end  如上图所示：驱动程序的注册的流程如上图所示：由上述一系列函数组成，其中函数说明如下：
   函数 说明     alloc_chrdev 申请一组可用的主从设备号，当主设备号为零的时候表明是动态分配   cdev_alloc 申请一个可用的dev对象，用于存储操作函数相关的结构体   cdev_init 将操作函数结构体赋值   cdev_add 将cdev与主从设备号关联起来   class_create 在/sys/class/路径下面创建一个类用于存储驱动相关信息   device_create 在class_create创建的类下面创建一个device，分配唯一的主从设备号，并且uevent给udev在/dev下面创建软连接    tops.c
#include &amp;lt;linux/init.h&amp;gt;#include &amp;lt;linux/kernel.h&amp;gt;#include &amp;lt;linux/module.h&amp;gt;#include &amp;lt;linux/fs.h&amp;gt;#include &amp;lt;linux/cdev.h&amp;gt;#include &amp;lt;linux/slab.h&amp;gt;#include &amp;lt;linux/uaccess.h&amp;gt;#include &amp;lt;linux/semaphore.h&amp;gt;#include &amp;lt;linux/miscdevice.h&amp;gt;#include &amp;lt;linux/vmalloc.h&amp;gt;#include &amp;lt;linux/wait.h&amp;gt;#include &amp;lt;linux/poll.h&amp;gt;#include &amp;lt;linux/sched.h&amp;gt;#include &amp;lt;linux/proc_fs.h&amp;gt;#include &amp;lt;linux/seq_file.</description>
    </item>
    
    <item>
      <title>Lichee_03GPIO摸索</title>
      <link>https://shuishen-cang.github.io/post/lichee_03gpio%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 06 Jan 2021 00:02:08 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/lichee_03gpio%E5%88%86%E6%9E%90/</guid>
      <description>Lichee_03GPIO分析  一、设备树 linux使用设备树来管理device，我们之前使用的设备树是sun8i-v3s-licheepi-zero-dock.dts，根据设备树在板卡的/sys/firmware/devicetree/base会生成相对应的属性文件，板卡上存在一个三色的led，我们可以用它来测试驱动，但是该部分led在系统启动后便已经正常点亮，因此需要查看该部分原因。
经过分析，其中RGBled的引脚与MMC1的引脚发生了冲突，因此导致了LED上电之后会正常启动，那么应该禁止其在设备树中的使能。修改sun8i-v3s-licheepi-zero-dock.dts，删除其MMC1中的status = &amp;ldquo;okay&amp;rdquo;;代码如下：
&amp;amp;mmc1 { pinctrl-0 = &amp;lt;&amp;amp;mmc1_pins&amp;gt;; pinctrl-names = &amp;#34;default&amp;#34;; broken-cd; bus-width = &amp;lt;4&amp;gt;; vmmc-supply = &amp;lt;&amp;amp;reg_vcc3v3&amp;gt;; }; 修改后对设备树进行编译。 在linux根目录下：
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- dtbs 将编译后的arch/arm/boot/dts/sun8i-v3s-licheepi-zero-dock.dtb覆盖掉之前的dtb，然后重启板卡，发现led已经没有启动了，然后查看mmc1的状态。
cat /sys/firmware/devicetree/base/soc/mmc@01c10000/status disabled 表明mmc1已经关闭了。
二、操作GPIO 如图所示，PG0的编号为192，因此采用linux的标准操作尝试操作一下GPIO。
echo 192 &amp;gt; /sys/class/gpio/ ls /sys/class/gpio/ cd /sys/class/gpio/gpio192/ echo &amp;#34;out&amp;#34; &amp;gt; /sys/class/gpio/gpio192/direction echo 1 &amp;gt; /sys/class/gpio/gpio192/value echo 0 &amp;gt; /sys/class/gpio/gpio192/value 当给value赋值为0的时候发现灯能够点亮，赋值为1的时候灯熄灭，说明GPIO操作成功，依次尝试操作PG0，PG1，PG2都能成功，说明操作该部分GPIO成功。
三、编写用户程序测试GPIO 上面代码在shell实现了gpio的操作，但是大部分时候程序是在c语言中实现的，c语言中其gpio的翻转速度更快一些。
其实现步骤如下：
 往/sys/class/gpio/export写入引脚编号 设置引脚方向 写入引脚的值  代码如下：
hal_gpio.c
#include &amp;#34;hal_gpio.h&amp;#34; struct gpio_ctl pg_port[] = { { .</description>
    </item>
    
    <item>
      <title>Lichee_01开发环境</title>
      <link>https://shuishen-cang.github.io/post/lichee_01%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 27 Dec 2020 21:31:22 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/lichee_01%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>Lichee_01开发环境  [toc]
一、开发环境搭建 1. 建立docker容器 手上有一块lichee板子很久了，lichee的资料相对较全，最近又在学习linux，因此拿这个平台验证一下也不错，要开发芯片，必须先搭建交叉编译环境，考虑到电脑上已经安装了一个树莓派的交叉编译环境了，那么就在docker里面安装交叉编译器吧。
先搭建一个最基本的docker开发环境吧，采用ubuntu18为基础
docker pull ubuntu:18.04 docker images 可以看到已经存在ubuntu镜像了，然后在workspace下面建立一个目录用来作为lichee的开发目录，其目录为~/workspace/02prj/01lichee_zero下面，因此采用以下命令创建一个容器。
docker run -it --name=lichee -v ~/workspace/02prj/01lichee_zero:/workspace ubuntu:18.04 /bin/bash # 进入docker容器后 apt update apt install nano nano /etc/apt/sources.list # 修改为 deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.</description>
    </item>
    
    <item>
      <title>Lichee_02系统编译</title>
      <link>https://shuishen-cang.github.io/post/lichee_02%E7%B3%BB%E7%BB%9F%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 27 Dec 2020 21:31:22 +0800</pubDate>
      
      <guid>https://shuishen-cang.github.io/post/lichee_02%E7%B3%BB%E7%BB%9F%E7%BC%96%E8%AF%91/</guid>
      <description>Lichee_02系统编译  一、编译uboot 1. 下载uboot 主机和容器之间存在共享文件夹，在主机里下载最新的uboot。
cd ~/workspace/02prj/01lichee_zero/01system/ git clone https://github.com/Lichee-Pi/u-boot.git -b v3s-current 等待下载完毕后，进入u-boot路径，由于买的板子没有spiflash，因此需要编译支持SD卡启动，修改uboot，
# 修改 include/configs/sun8i.h, 使u-boot可以直接从tf卡启动： vim include/configs/sun8i.h # 添加 #define CONFIG_BOOTCOMMAND &amp;#34;setenv bootm_boot_mode sec; load mmc 0:1 0x41000000 zImage; load mmc 0:1 0x41800000 sun8i-v3s-licheepi-zero-dock.dtb; bootz 0x41000000 - 0x41800000;&amp;#34; #define CONFIG_BOOTARGS &amp;#34;console=ttyS0,115200 panic=5 mtdparts=tf:1M(uboot),64k(dtb),4M(kernel),-(rootfs) rootwait root=/dev/mmcblk0p2 earlyprintk rw vt.global_cursor_default=0&amp;#34; 2. 编译 先安装必须的依赖库。
apt-get install libncurses5-dev apt-get install device-tree-compiler apt-get install python apt-get install bc docker start lichee docker attach lichee cd /workspace/01system/u-boot/ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- LicheePi_Zero_800x480LCD_defconfig make ARCH=arm menuconfig time make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- 2&amp;gt;&amp;amp;1 | tee build.</description>
    </item>
    
  </channel>
</rss>